import java.util.*;

 

public class Yahtzee {

    enum Category{
        ACES,TWOS,THREES,FOURS,FIVES,SIXES,THREEOFAKIND,FOUROFAKIND,YAHTZEE,FULLHOUSE,BIGSTRAIGHT,SMALLSRAIGHT;
    }


 

    private int[] dieRoll = new int[5];
    private int score;
    private String Category;
    private double AcesAvg = 1.88, TwosAvg = 5.28, ThreesAvg = 8.57, FoursAvg = 12.16, FivesAvg = 15.69, 
    		SixesAvg = 19.19, ThreeOfAKindAvg = 21.66, FourOfAKindAvg = 13.10, FullHouseAvg = 22.59, 
    		SmallStraightAvg = 29.46, LargeStraightAvg = 32.71, YahtzeeCatAvg = 16.87, ChanceAvg = 22.01;  

 

    public Yahtzee( String Category) {
        this.Category = Category;
        Die d1 = new Die();
        Die d2 = new Die();
        Die d3 = new Die();
        Die d4 = new Die();
        Die d5 = new Die();

        this.dieRoll[0]=(d1.DieRoll());
        this.dieRoll[1]=(d2.DieRoll());
        this.dieRoll[2]=(d3.DieRoll());
        this.dieRoll[3]=(d4.DieRoll());
        this.dieRoll[4]=(d5.DieRoll());

    }

    public List<Integer> getdieRoll() {
        return ArrayToList(this.dieRoll);
    }

    public int[] getdieRollArr() {
        return this.dieRoll;
    }

    public List<Integer> UpperSecResult(){
        List<Integer> list1 = new ArrayList<>();
        list1.add(Aces());
        list1.add(Twos());
        list1.add(Threes());
        list1.add(Fours());
        list1.add(Fives());
        list1.add(Sixes());
        return list1;
    }
    
    public List<Integer> LowerSecResult(){
        List<Integer> list1 = new ArrayList<>();
        list1.add(ThreeOfAKind());
        list1.add(FourOfAKind());
        list1.add(YahtzeeCat());
        list1.add(FullHouse());
        list1.add(Chance());
        list1.add(LargeStraight());
        list1.add(SmallStraight());
        return list1;

    }

    public int upperSecScore(int number) {
        int count = 0;
        for (int i = 0; i < dieRoll.length; i++) {
            if (dieRoll[i] == number) {
                count++;
            }
        }
        return count * number;
    }

    public int Occurences(List<Integer> list, int number) {
        int freq = Collections.frequency(list, number);
        return freq;
    }

    public ArrayList<Integer> ArrayToList(int[] arr) {
        ArrayList<Integer> dieRollList = new ArrayList<>();
        for (int i : arr) {
            dieRollList.add(i);
        }
        return dieRollList;
    }

    public int Aces() {
        return upperSecScore(1);
    }

    public int Twos() {
        return upperSecScore(2);
    }

    public int Threes() {
        return upperSecScore(3);
    }

    public int Fours() {
        return upperSecScore(4);
    }

    public int Fives() {
        return upperSecScore(5);
    }

    public int Sixes() {
        return upperSecScore(6);
    }

    public int Chance() {
        int sum = 0;
        for (int i = 0; i < dieRoll.length; i++)
            sum += dieRoll[i];
        return sum;
    }

    public int ThreeOfAKind() {
        List<Integer> list = new ArrayList<Integer>();
        int number = 0;
        list = ArrayToList(dieRoll);
        for (int i = 0; i < dieRoll.length; i++) {
            if (Occurences(list, dieRoll[i]) == 3) {
                number = dieRoll[i];
                return Chance();
            }
        }
        return (number);
    }

    public int FourOfAKind() {
        List<Integer> list = new ArrayList<Integer>();
        int number = 0;
        list = ArrayToList(dieRoll);
        for (int i = 0; i < dieRoll.length; i++) {
            if (Occurences(list, dieRoll[i]) == 4) {
                number = dieRoll[i];
                return Chance();
            }
        }
        return (number);
    }

    public int YahtzeeCat() {
        List<Integer> list = new ArrayList<Integer>();
        int number = 0;
        list = ArrayToList(dieRoll);
        for (int i = 0; i < dieRoll.length; i++) {
            if (Occurences(list, dieRoll[i]) == 5) {
                number = dieRoll[i];
                return Chance();
            }
        }
        return (number);
    }

    public int FullHouse() {
        List<Integer> list = new ArrayList<Integer>();
        int number = 0;
        list = ArrayToList(dieRoll);
        for (int i = 0; i < dieRoll.length- 1; i++) {
            if ((Occurences(list, dieRoll[i]) == 3) && (Occurences(list, dieRoll[i+1]) == 2)) {
                number = dieRoll[i];
                return 25;
            }
        }
        return (number);

    }
    
     public int StraightLargeOrSmall() { 
          Arrays.sort(dieRoll); 
          String s = new String();
          for(int i : dieRoll) {
              if(!s.contains(String.valueOf(i)))
                    s=s.concat(String.valueOf(i));
          }

          if(s.contains("12345")||s.contains("23456"))
                return 40;
            else if(s.contains("1234")||s.contains("2345")||s.contains("3456"))
                return 30;        
            else
                return 0;
        }

     public int LargeStraight() {
          if(StraightLargeOrSmall()==40) {
             return StraightLargeOrSmall(); 
          }
          return 0;
      }

      public int SmallStraight() {
          if(StraightLargeOrSmall()==30) {
             return StraightLargeOrSmall(); 
          }
          return 0;
      }
      
      public selectCat() {
    	  
      }
}